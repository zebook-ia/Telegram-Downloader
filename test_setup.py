#!/usr/bin/env python3
"""
Script de teste para verificar a configura√ß√£o do Telegram Media Downloader
"""

import sys
import importlib
import os


def test_python_version():
    """Testa se a vers√£o do Python √© adequada"""
    print("üêç Testando vers√£o do Python...")
    version = sys.version_info
    if version.major >= 3 and version.minor >= 8:
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
        return True
    else:
        print(
            f"‚ùå Python {version.major}.{version.minor}.{version.micro} - Requer Python 3.8+"
        )
        return False


def test_dependencies():
    """Testa se todas as depend√™ncias est√£o instaladas"""
    print("\nüì¶ Testando depend√™ncias...")

    dependencies = ["telethon", "tqdm", "qrcode", "asyncio"]

    all_ok = True

    for dep in dependencies:
        try:
            importlib.import_module(dep)
            print(f"‚úÖ {dep} - Instalado")
        except ImportError:
            print(f"‚ùå {dep} - N√ÉO INSTALADO")
            all_ok = False

    return all_ok


def test_config():
    """Testa se a configura√ß√£o est√° v√°lida"""
    print("\n‚öôÔ∏è Testando configura√ß√£o...")

    try:
        from config import API_ID, API_HASH, SESSION_NAME, EXPORTS_DIR

        # Verificar se as credenciais foram alteradas dos valores padr√£o
        if API_ID == 12345:
            print("‚ùå API_ID n√£o configurado (ainda √© o valor padr√£o)")
            return False

        if API_HASH == "0123456789abcdef0123456789abcdef":
            print("‚ùå API_HASH n√£o configurado (ainda √© o valor padr√£o)")
            return False

        print(f"‚úÖ API_ID: {API_ID}")
        print(f"‚úÖ API_HASH: {API_HASH[:8]}... (mascarado)")
        print(f"‚úÖ SESSION_NAME: {SESSION_NAME}")
        print(f"‚úÖ EXPORTS_DIR: {EXPORTS_DIR}")

        return True

    except ImportError as e:
        print(f"‚ùå Erro ao importar config.py: {e}")
        return False


def test_modules():
    """Testa se todos os m√≥dulos do projeto carregam corretamente"""
    print("\nüîß Testando m√≥dulos do projeto...")

    modules = ["config", "file_utils", "telethon_handlers", "telegram_downloader"]

    all_ok = True

    for module in modules:
        try:
            importlib.import_module(module)
            print(f"‚úÖ {module}.py - OK")
        except Exception as e:
            print(f"‚ùå {module}.py - ERRO: {e}")
            all_ok = False

    return all_ok


def test_file_structure():
    """Testa se a estrutura de arquivos est√° correta"""
    print("\nüìÅ Testando estrutura de arquivos...")

    required_files = [
        "config.py",
        "file_utils.py",
        "telethon_handlers.py",
        "telegram_downloader.py",
        "requirements.txt",
        "README.md",
    ]

    all_ok = True

    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file} - Existe")
        else:
            print(f"‚ùå {file} - N√ÉO ENCONTRADO")
            all_ok = False

    return all_ok


def create_exports_dir():
    """Cria o diret√≥rio exports se n√£o existir"""
    print("\nüìÇ Verificando diret√≥rio de exporta√ß√£o...")

    try:
        from config import EXPORTS_DIR

        if not os.path.exists(EXPORTS_DIR):
            os.makedirs(EXPORTS_DIR)
            print(f"‚úÖ Diret√≥rio '{EXPORTS_DIR}' criado")
        else:
            print(f"‚úÖ Diret√≥rio '{EXPORTS_DIR}' j√° existe")

        return True

    except Exception as e:
        print(f"‚ùå Erro ao criar diret√≥rio: {e}")
        return False


def main():
    """Fun√ß√£o principal do teste"""
    print("=" * 60)
    print("üß™ TELEGRAM MEDIA DOWNLOADER - TESTE DE CONFIGURA√á√ÉO")
    print("=" * 60)

    tests = [
        ("Vers√£o do Python", test_python_version),
        ("Depend√™ncias", test_dependencies),
        ("Estrutura de Arquivos", test_file_structure),
        ("M√≥dulos do Projeto", test_modules),
        ("Configura√ß√£o", test_config),
        ("Diret√≥rio de Exports", create_exports_dir),
    ]

    results = []

    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erro durante teste '{test_name}': {e}")
            results.append((test_name, False))

    # Relat√≥rio final
    print("\n" + "=" * 60)
    print("üìä RELAT√ìRIO FINAL DOS TESTES")
    print("=" * 60)

    passed = 0
    failed = 0

    for test_name, result in results:
        if result:
            print(f"‚úÖ {test_name}")
            passed += 1
        else:
            print(f"‚ùå {test_name}")
            failed += 1

    print(f"\nüìà Resumo: {passed} testes passaram, {failed} falharam")

    if failed == 0:
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("üöÄ O sistema est√° pronto para uso!")
        print("\nüí° Pr√≥ximos passos:")
        print("1. Configure suas credenciais da API em config.py")
        print("2. Execute: python3 telegram_downloader.py")
    else:
        print("\n‚ö†Ô∏è ALGUNS TESTES FALHARAM!")
        print("üîß Por favor, corrija os problemas antes de continuar")

        if any(
            "API_ID" in str(result) or "API_HASH" in str(result)
            for _, result in results
        ):
            print("\nüìù Para configurar as credenciais:")
            print("1. V√° para https://my.telegram.org/apps")
            print("2. Crie uma nova aplica√ß√£o")
            print("3. Copie API_ID e API_HASH para config.py")

    return failed == 0


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
